# 151
# 리스트에는 네 개의 정수가 저장돼 있다.
#
리스트 = [3, -20, -3, 44]
# for문을 사용해서 리스트의 음수를 출력하라.
#
# -20
# -3

# a = list(filter(lambda x: x<0,리스트 ))
# b = [i for i in 리스트 if i < 0]
# print(a)
# print(b)
#
# 152
# for문을 사용해서 3의 배수만을 출력하라.
#
리스트 = [3, 100, 23, 44]
# 3
# print([i for i in 리스트 if i % 3 == 0])


# 153
# 리스트에서 20 보다 작은 3의 배수를 출력하라
#
리스트 = [13, 21, 12, 14, 30, 18]
# 12
# 18
# print([i for i in 리스트 if i % 3 == 0 and i < 20])

# 154
# 리스트에서 세 글자 이상의 문자를 화면에 출력하라
#
리스트 = ["I", "study", "python", "language", "!"]
# study
# python
# language

# print([i for i in 리스트 if len(i)>=3])

# 155
# 리스트에서 대문자만 화면에 출력하라.
#
리스트 = ["A", "b", "c", "D"]
# A
# D

# print([i for i in 리스트 if i.isupper()])

# 156
# 리스트에서 소문자만 화면에 출력하라.
#
리스트 = ["A", "b", "c", "D"]
# b
# c
# print([i for i in 리스트 if i.islower()])
#
# 157
# 이름의 첫 글자를 대문자로 변경해서 출력하라.
#
리스트 = ['dog', 'cat', 'parrot']
# Dog
# Cat
# Parrot

# print([i.capitalize() for i in 리스트])

# 158
# 파일 이름이 저장된 리스트에서 확장자를 제거하고
# 파일 이름만 화면에 출력하라. (힌트: split() 메서드)
#
리스트 = ['hello.py', 'ex01.py', 'intro.hwp']
# hello
# ex01
# intro

# print([i.split('.')[0] for i in 리스트])

# 160
# 파일 이름이 저장된 리스트에서 확장자가 .h나 .c인 파일을 화면에 출력하라.
#
리스트 = ['intra.h', 'intra.c', 'define.h', 'run.py']
# intra.h
# intra.c
# define.h

# print([i for i in 리스트 if i.split('.')[1] in ['h','c']])
#
# 161
# for문과 range 구문을 사용해서 0~99까지 한 라인에 하나씩 순차적으로
# 출력하는 프로그램을 작성하라.

# for i in range(99+1):
#     print(i)

# 162
# 월드컵은 4년에 한 번 개최된다. range()를 사용하여 2002~2050년까지 중 월드컵이 개최되는 연도를 출력하라.
#
# 2002
# 2006
# 2010
# ...
# 2042
# 2046
# 2050

# for i in range(2002,2051,4):
#     print(i)

# 163
# 1부터 30까지의 숫자 중 3의 배수를 출력하라.
# for i in range(1,31):
#     if i % 3 == 0:
#         print(i)

# 164
# 99부터 0까지 1씩 감소하는 숫자들을, 한 라인에 하나씩 출력하라.

# for i in list(range(0,100))[::-1]:
#     print(i)

# 165
# for문을 사용해서 아래와 같이 출력하라.
#
# 0.0
# 0.1
# 0.2
# 0.3
# 0.4
# 0.5
# ...
# 0.9
# for i in range(10):
#     print(i/10)

# 166
# 구구단 3단을 출력하라.
#
# 3x1 = 3
# 3x2 = 6
# 3x3 = 9
# 3x4 = 12
# 3x5 = 15
# 3x6 = 18
# 3x7 = 21
# 3x8 = 24
# 3x9 = 27

# for i in range(1,10):
#     print('3x'+str(i)+' =',3*i)

# 167
# 구구단 3단을 출력하라. 단 홀수 번째만 출력한다.
#
# 3x1 = 3
# 3x3 = 9
# 3x5 = 15
# 3x7 = 21
# 3x9 = 27

# for i in range(1,10):
#     if i % 2 != 0:
#         print('3x'+str(i)+' =',3*i)

# 168
# 1~10까지의 숫자에 대해 모두 더한 값을 출력하는 프로그램을
# for 문을 사용하여 작성하라.
#
# 합 : 55

# sum = 0
# for i in range(1,11):
#     sum += i
# print('합 :',sum)

# 169
# 1~10까지의 숫자 중 모든 홀수의 합을 출력하는 프로그램을
# for 문을 사용하여 작성하라.
#
# 합: 25
# sum = 0
# for i in range(1,11,2):
#     sum += i
# print('합 :',sum)

# 170
# 1~10까지의 숫자를 모두 곱한 값을 출력하는 프로그램을
# for 문을 사용하여 작성하라.

# sum = 1
# for i in range(1, 11):
#     sum *= i
# print('합 :', sum)

# 171
# 아래와 같이 리스트의 데이터를 출력하라. 단, for문과 range문을 사용하라.
#
price_list = [32100, 32150, 32000, 32500]
# 32100
# 32150
# 32000
# 32500

# for i in range(4):
#     print(price_list[i])


# 172
# 아래와 같이 리스트의 데이터를 출력하라. 단, for문과 range문을 사용하라.
#
price_list = [32100, 32150, 32000, 32500]
# 0 32100
# 1 32150
# 2 32000
# 3 32500

# for i in range(4):
#     print(i,price_list[i])

# 173
# 아래와 같이 리스트의 데이터를 출력하라. 단, for문과 range문을 사용하라.
#
price_list = [32100, 32150, 32000, 32500]
# 3 32100
# 2 32150
# 1 32000
# 0 32500

# for i in range(4):
#     print(3-i,price_list[i])

# 174
# 아래와 같이 리스트의 데이터를 출력하라. 단, for문과 range문을 사용하라.
#
price_list = [32100, 32150, 32000, 32500]
# 100 32150
# 110 32000
# 120 32500
# for i in range(1,4):
#     print(100 + i*10 -10 ,price_list[i])

# 175
# my_list를 아래와 같이 출력하라.
#
my_list = ["가", "나", "다", "라"]
# 가 나
# 나 다
# 다 라
cnt = 0
# for i in my_list:
#     if i == '라':
#         break
#     print(my_list[cnt],my_list[cnt+1])
#     cnt+=1
# 176
# 리스트를 아래와 같이 출력하라.
#
my_list = ["가", "나", "다", "라", "마"]
# 가 나 다
# 나 다 라
# 다 라 마
# cnt = 0
# for i in my_list:
#     if cnt == 3:
#
#         break
#     print(my_list[cnt],my_list[cnt+1],my_list[cnt+2])
#     cnt+=1


# 177
# 반복문과 range 함수를 사용해서 my_list를 아래와 같이 출력하라.
#
my_list = ["가", "나", "다", "라"]
# 라 다
# 다 나
# 나 가

# for i in range(1,len(my_list)):
#     print(my_list[len(my_list)-i],my_list[len(my_list)-i-1],)


# 178
# 리스트에는 네 개의 정수가 저장되어 있다. 각각의 데이터에 대해서
# 자신과 우측값과의 차분값을 화면에 출력하라.
#
my_list = [100, 200, 400, 800]
# 예를들어 100을 기준으로 우측에 위치한 200과의 차분 값를 화면에 출력하고,
# 200을 기준으로 우측에 위치한 400과의 차분값을 화면에 출력한다.
# 이어서 400을 기준으로 우측에 위치한 800과의 차분값을 화면에 출력한다.
#
# 100
# 200
# 400

# print([ my_list[i+1] - my_list[i] for i in range(3) ])

# 179
# 리스트에는 6일 간의 종가 데이터가 저장되어 있다. 종가 데이터의 3일 이동 평균을 계산하고 이를 화면에 출력하라.
#
my_list = [100, 200, 400, 800, 1000, 1300]
# 첫 번째 줄에는 100, 200, 400의 평균값이 출력된다.
# 두 번째 줄에는 200, 400, 800의 평균값이 출력된다.
# 같은 방식으로 나머지 데이터의 평균을 출력한다.
#
# 233.33333333333334
# 466.6666666666667
# 733.3333333333334
# 1033.3333333333333

print([ (my_list[i]+my_list[i+1]+my_list[i+2]) / 3 for i in range(4)])

# 180
# 리스트에 5일간의 저가, 고가 정보가 저장돼 있다.
# 고가와 저가의 차를 변동폭이라고 정의할 때, low, high 두 개의 리스트를 사용해서
# 5일간의 변동폭을 volatility 리스트에 저장하라.

low_prices  = [100, 200, 400, 800, 1000]
high_prices = [150, 300, 430, 880, 1000]
volatility = []
for i in range(5):
    volatility.append(high_prices[i] - low_prices[i] )

print(volatility)

# 181
# 아래 표에서 하나의 행을 하나의 리스트로,
# 총 3개의 리스트를 갖는 이차원 리스트 apart를 정의하라.
#
# 101호	102호
# 201호	202호
# 301호	302호

apart = [['101호','102호'],['201호','202호'],['301호','302호']]

# 182
# 아래 표에서 하나의 열을 하나의 리스트로,
# 총 2개의 리스트를 갖는 이차원 리스트 stock을 정의하라.
#
# 시가	종가
# 100	80
# 200	210
# 300	330
stock = [[100,200,300],[80,210,330]]

# 183
# 아래 표를 stock 이름의 딕셔너리로 표현하라.시가를 key로 저장하고,
# 나머지 같은 열의 데이터를 리스트로 저장해서 value로 저장한다.
# 종가 역시 key로 저장하고 나머지 같은 열의 데이터를 리스트로 저장해서 value로 저장한다.
#
# 시가	종가
# 100	80
# 200	210
# 300	330

stock = dict(zip(('시가','종가'),([100,200,300],[80,210,330])))
# print(stock)

# 184
# 아래 표를 stock 이라는 이름의 딕셔너리로 표현하라.
# 날짜를 key로 저장하고, 나머지 같은 행의 데이터를 리스트로 저장해서 value로 저장한다. 첫 열이 날짜이다.
#
# 10/10	80	110	70	90
# 10/11	210	230	190	200

stock = dict((('10/10',[80,110,70,90]),('10/11',[210,230,190,200])))
# print(stock)

# 185
# 리스트에 저장된 데이터를 아래와 같이 출력하라.
#
apart = [ [101, 102], [201, 202], [301, 302] ]
# 101 호
# 102 호
# 201 호
# 202 호
# 301 호
# 302 호

# for i in apart:
#     for j in i:
#         print(j,'호')
# 186
# 리스트에 저장된 데이터를 아래와 같이 출력하라.
#
apart = [ [101, 102], [201, 202], [301, 302] ]
# 301 호
# 302 호
# 201 호
# 202 호
# 101 호
# 102 호
# apart.sort(reverse=True)
# for i in apart:
#     for j in i:
#         print(j, '호')

# 187
# 리스트에 저장된 데이터를 아래와 같이 출력하라.
#
apart = [ [101, 102], [201, 202], [301, 302] ]
# 302 호
# 301 호
# 202 호
# 201 호
# 102 호
# 101 호

# for i in apart[::-1]:
#     for k in i[::-1]:
#         print(k,'호')

# 188
# 리스트에 저장된 데이터를 아래와 같이 출력하라.
#
apart = [ [101, 102], [201, 202], [301, 302] ]
# 101 호
# -----
# 102 호
# -----
# 201 호
# -----
# 202 호
# -----
# 301 호
# -----
# 302 호
# -----

# for i in apart:
#     for j in i:
#         print(j,'호',end='\n-----\n')

# 189
# 리스트에 저장된 데이터를 아래와 같이 출력하라.
#
apart = [ [101, 102], [201, 202], [301, 302] ]
# 101 호
# 102 호
# -----
# 201 호
# 202 호
# -----
# 301 호
# 302 호
# -----
# for i in apart:
#     for j in i:
#         print(j,'호')
#     print('-----')

# 190
# 리스트에 저장된 데이터를 아래와 같이 출력하라.
#
apart = [ [101, 102], [201, 202], [301, 302] ]
# 101 호
# 102 호
# 201 호
# 202 호
# 301 호
# 302 호
# -----


# for i in apart:
#     for j in i:
#         print(j,'호')
# print('-----')

# 191
# data에는 매수한 종목들의 OHLC (open/high/low/close) 가격 정보가 바인딩 되어있다.
#
data = [
    [ 2000,  3050,  2050,  1980],
    [ 7500,  2050,  2050,  1980],
    [15450, 15050, 15550, 14900]
]
#
# 수수료를 0.014 %로 가정할 때, 각 가격에 수수료를 포함한 가격을 한라인에 하나씩 출력하라.
#
# 2000.28
# 3050.427
# 2050.2870000000003
# ...

# rate = 1.00014
# for i in data:
#     for j in i:
#         print(j*rate)

# 192
# 191번의 출력 결과에 행단위로 "----" 구분자를 추가하라.
#
# 2000.28
# 3050.427
# 2050.2870000000003
# 1980.2772
# ----
# 7501.05
# 2050.2870000000003
# 2050.2870000000003
# 1980.2772
# ----
# 15452.163
# 15052.107
# 15552.177
# 14902.086000000001
# ----

# rate = 1.00014
# for i in data:
#     for j in i:
#         print(j*rate)
#     print('----')

# 193
# 192 번 문제의 결괏값을 result 이름의 리스트에 1차원 배열로 저장하라.
#
# >> print(result)
# [2000.28, 3050.427, 2050.2870000000003, 1980.2772, 7501.05, 2050.2870000000003, 2050.2870000000003, ...]
# result = []
# rate = 1.00014
# for i in data:
#     for j in i:
#         result.append(j*rate)
# print(result)

# 194
# 191번 문제의 결괏값을 result 이름의 리스트에 2차원 배열로 저장하라.
# 저장 포맷은 아래와 같다. 각 행에 대한 데이터끼리 리스트에 저장되어야 한다.
# result = []
# rate = 1.00014
# for i in data:
#     a = []
#     for j in i:
#         a.append(j*rate)
#     result.append(a)
# print(result)

# 195
# ohlc 리스트에는 시가(open), 고가 (high), 저가 (low) , 종가(close)가 날짜별로 저장돼 있다.
# 화면에 종가데이터를 출력하라.
#
# ohlc = [["open", "high", "low", "close"],
#         [100, 110, 70, 100],
#         [200, 210, 180, 190],
#         [300, 310, 300, 310]]
# # 100
# # 190
# # 310
#
# for i in range(1,4):
#     print(ohlc[i][3])

# 196
# ohlc 리스트에는 시가(open), 고가 (high), 저가 (low) , 종가(close)가 날짜별로 저장돼 있다.
# 종가가 150원보다 큰경우에만 종가를 출력하라.
#
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
# 190
# 310

# for i in ohlc[1:]:
#     if i[3] > 150:
#         print(i[3])

# 197
# ohlc 리스트에는 시가(open), 고가 (high), 저가 (low) , 종가(close)가 날짜별로 저장돼 있다.
# 종가가 시가 보다 크거나 같은 경우에만 종가를 출력하라.
#
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
# 100
# 310


#
# 198
# ohlc 리스트에는 시가(open), 고가 (high), 저가 (low) , 종가(close)가 날짜별로 저장돼 있다.
# 고가와 저가의 차이를 변동폭으로 정의할 때 변동폭을 volatility 이름의 리스트에 저장하라.
#
# ohlc = [["open", "high", "low", "close"],
#         [100, 110, 70, 100],
#         [200, 210, 180, 190],
#         [300, 310, 300, 310]]
# volatility = []
# for i in ohlc[1:]:
#         volatility.append(i[1]-i[2])
# print(volatility)
# [40, 30, 10]

# 199
# 리스트에는 3일 간의 ohlc 데이터가 저장돼 있다.
# 종가가 시가보다 높은 날의 변동성 (고가 - 저가)을 화면에 출력하라.
#
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
# 종가가 시가보다 높은 거래일의 OHLC는 [300, 310, 300, 310] 이다.
# 따라서 이 거래일의 변동성은 10 (310 - 300)이다.

volatility = []
for i in ohlc[1:]:
    if i[3] > i[0]:
        volatility.append(i[1] - i[2])
print(volatility)

# 200
# 리스트에는 3일 간의 ohlc 데이터가 저장돼 있다.
# 시가에 매수해서 종가에 매도 했을 경우 총 수익금을 계산하라.
#
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
# 1일차 수익 0원 (100 - 100), 2일차 수익 -10원 (190 - 200),
# 3일차 수익 10원 (310 - 300) 이다.
sum = 0
for i in ohlc[1:]:
    print(i[3]-i[0],'원')
    sum += i[3]-i[0]
print(sum)